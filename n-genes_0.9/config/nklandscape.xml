<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE program SYSTEM "./genetic.dtd">

<program>
    <constant NAME="seed" VALUE="0"/>
    <!-- Creating the genetic algorithm -->
    <genetic popSize="1000">
        <!--        <population CLASS="populations.CachingPopulation">-->
        <!--            <parameter NAME="cacheSize" VALUE="100M"/>-->
        <!--        </population>-->
        <population/>

        <!-- Declaring the context -->
        <context id="context">
            <random CLASS="ch.unige.ng.tools.rng.MersenneTwister" seed="#seed#"/>
            <!-- <random CLASS="ch.unige.ng.tools.rng.MersenneTwister" seed="0"/>-->
        </context>

        <!-- Declaring the individual with the fitness and the factory -->
        <individual CLASS="ch.unige.ng.species.VectorIndividual" indSize="1000" id="prototype">
            <!-- Creating the geneFactory: It is the object that decides hot to randomly create genes -->
            <geneFactory CLASS="ch.unige.ng.species.booleans.BooleanGeneFactory">
                <object reference="context"/>
            </geneFactory>

            <!-- Declaring the fitness used -->
            <fitness CLASS="ch.unige.ng.problems.nklandscape.NkLandscapeReader">
                <parameter NAME="filename" VALUE="config/nklandscape/nk1000_16.obj"/>
            </fitness>

        </individual>



        <!-- Determining the selection of a randomly gene -->

        <!-- Defining the mutation.
            The mutation is fired with a probability of 0.1 and one gene is modified
        -->
<!--        <pipe>-->
            <!-- The crossover is defined. The cutting point is decided randomly -->
            <crossover CLASS="ch.unige.ng.ops.crossover.BasicOnePointCrossOver">
                <parameter NAME="politic" VALUE="RANDOM"/>
            </crossover>

            <mutation CLASS="ch.unige.ng.ops.mutation.BasicPointMutation"/>
<!--        </pipe>-->

        <!-- Defining the selection method-->

        <selection CLASS="ch.unige.ng.ops.select.KTournamentSelector">
            <parameter NAME="size" VALUE="5"/>
        </selection>

        <!-- Running a timer -->
        <log>
            <!-- The timer will be fired at frequency 2-->
            <frequencyCondition frequency="5"/>
            <!--            <endCondition/>-->

            <!-- The logger that output data -->
            <logger>
                <!-- we will print the best individual -->
                <statistic CLASS="ch.unige.ng.statistics.BestStatistic"/>
                <statistic CLASS="ch.unige.ng.statistics.MeanStatistic"/>
                <statistic CLASS="ch.unige.ng.statistics.WorstStatistic"/>
                <statistic CLASS="ch.unige.ng.statistics.EverBestStatistic"/>
                <statistic CLASS="ch.unige.ng.statistics.STDStatistic"/>
                <statistic CLASS="ch.unige.ng.statistics.GenotypeStdStatistic"/>
                    <writer CLASS="ch.unige.ng.tools.io.writer.DefaultWriter" console="true">
                    <parameter NAME="header" VALUE="true"/>
                    <parameter NAME="separator" VALUE="\t"/>
                </writer>
            </logger>
        </log>


        <!-- Creating halting functions -->

        <!-- If the threshold is under EPS, the program is terminated -->
        <halt CLASS="ch.unige.ng.halt.MaximumStepHalting">
            <parameter NAME="step" VALUE="5000"/>
        </halt>

    </genetic>
</program>